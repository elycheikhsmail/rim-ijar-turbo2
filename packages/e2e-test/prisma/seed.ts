import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

const prisma = new PrismaClient();
console.log("üöÄ Initialisation du seeding...");
console.log("üîå Connexion √† la base de donn√©es...");
console.log("chaine de connexion : ", process.env.DATABASE_URL);
async function main() {
  console.log("üöÄ D√©but du seeding...");

  // üõë Supprimer les anciennes donn√©es
  await prisma.annonce.deleteMany({});
  await prisma.user.deleteMany({});
  await prisma.optionsModel.deleteMany({});

  // üè∑Ô∏è Types d'annonces
  const typesAnnoncesData = [
    { name: "Vente", nameAr: "ÿ®Ÿäÿπ" },
    { name: "Location", nameAr: "ÿßŸÑÿ•Ÿäÿ¨ÿßÿ±" },
    { name: "Service", nameAr: "ÿÆÿØŸÖÿ©" },
    { name: "Autres", nameAr: "ÿ£ŸÜŸàÿßÿπ ÿ£ÿÆÿ±Ÿâ" },
  ];

  const typeAnnonces = await Promise.all(
    typesAnnoncesData.map((type, index) =>
      prisma.optionsModel.create({
        data: { ...type, priority: index + 1, depth: 1, tag: "typeAnnonce" },
      }),
    ),
  );

  console.log("‚úÖ Types d'annonces ins√©r√©s.");

  // üè∑Ô∏è Cat√©gories associ√©es aux types d'annonces
  const categoriesData = [
    { name: "V√©hicules", nameAr: "ÿßŸÑŸÖÿ±ŸÉÿ®ÿßÿ™", parentType: "Vente" },
    { name: "Immobilier", nameAr: "ÿßŸÑÿπŸÇÿßÿ±ÿßÿ™", parentType: "Location" },
    { name: "√âlectronique", nameAr: "ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿßÿ™", parentType: "Vente" },
    { name: "Emploi", nameAr: "Ÿàÿ∏ÿßÿ¶ŸÅ", parentType: "Service" },
  ];

  const categories = await Promise.all(
    categoriesData.map(async (category, index) => {
      const parentType = typeAnnonces.find(
        (t) => t.name === category.parentType,
      );
      return prisma.optionsModel.create({
        data: {
          name: category.name,
          nameAr: category.nameAr,
          parentID: parentType?.id,
          priority: index + 1,
          depth: 2,
          tag: "category",
        },
      });
    }),
  );

  console.log("‚úÖ Cat√©gories ins√©r√©es.");

  // üè∑Ô∏è Sous-cat√©gories associ√©es aux cat√©gories
  const subCategoriesData = [
    { name: "Voitures", nameAr: "ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™", parentCategory: "V√©hicules" },
    { name: "Motos", nameAr: "ÿØÿ±ÿßÿ¨ÿßÿ™ ŸÜÿßÿ±Ÿäÿ©", parentCategory: "V√©hicules" },
    { name: "Appartements", nameAr: "ÿ¥ŸÇŸÇ", parentCategory: "Immobilier" },
    { name: "Maisons", nameAr: "ŸÖŸÜÿßÿ≤ŸÑ", parentCategory: "Immobilier" },
    { name: "Ordinateurs", nameAr: "ÿ≠Ÿàÿßÿ≥Ÿäÿ®", parentCategory: "√âlectronique" },
    { name: "T√©l√©phones", nameAr: "ŸáŸàÿßÿ™ŸÅ", parentCategory: "√âlectronique" },
    { name: "Offres d'emploi", nameAr: "ÿπÿ±Ÿàÿ∂ ÿßŸÑÿπŸÖŸÑ", parentCategory: "Emploi" },
    { name: "Freelance", nameAr: "ÿßŸÑÿπŸÖŸÑ ÿßŸÑÿ≠ÿ±", parentCategory: "Emploi" },
  ];

  const subCategories = await Promise.all(
    subCategoriesData.map(async (subCategory, index) => {
      const parentCategory = categories.find(
        (c) => c.name === subCategory.parentCategory,
      );
      return prisma.optionsModel.create({
        data: {
          name: subCategory.name,
          nameAr: subCategory.nameAr,
          parentID: parentCategory?.id,
          priority: index + 1,
          depth: 3,
          tag: "subcategory",
        },
      });
    }),
  );

  console.log("‚úÖ Sous-cat√©gories ins√©r√©es.");

  // üë§ Utilisateurs
  const hashedPassword = await bcrypt.hash("password123", 10);
  const users = await Promise.all(
    [
      "ali@example.com",
      "fatima@example.com",
      "omar@example.com",
      "khadija@example.com",
    ].map((email) =>
      prisma.user.create({
        data: {
          email,
          password: hashedPassword,
          createdAt: new Date(),
          lastLogin: new Date(),
          isActive: true,
        },
      }),
    ),
  );

  console.log("‚úÖ Utilisateurs ins√©r√©s.");

  // üì¢ G√©n√©ration d'annonces al√©atoires
  const annoncesData = [];
  const titles = [
    "Super voiture √† vendre",
    "Appartement luxueux √† louer",
    "Offre sp√©ciale sur les t√©l√©phones",
    "Maison spacieuse en centre-ville",
    "Travail freelance bien r√©mun√©r√©",
  ];
  const descriptions = [
    "En excellent √©tat, peu utilis√©.",
    "Prix n√©gociable, contactez-moi.",
    "Id√©al pour les √©tudiants et les familles.",
    "Livraison gratuite incluse.",
    "Opportunit√© unique, √† ne pas rater.",
  ];

  for (let i = 0; i < 50; i++) {
    // üîπ S√©lectionner un typeAnnonce al√©atoire
    const randomType =
      typeAnnonces[Math.floor(Math.random() * typeAnnonces.length)];
    if (!randomType) continue; // Skip if no valid type is found

    // üîπ S√©lectionner une cat√©gorie li√©e au typeAnnonce choisi
    const filteredCategories = categories.filter(
      (c) => c.parentID === randomType.id,
    );
    if (filteredCategories.length === 0) continue; // √âviter les erreurs si pas de cat√©gorie li√©e
    const randomCategory =
      filteredCategories[Math.floor(Math.random() * filteredCategories.length)];
    if (!randomCategory) continue; // Skip if no valid category is found

    // üîπ S√©lectionner une sous-cat√©gorie li√©e √† la cat√©gorie choisie
    const filteredSubCategories = subCategories.filter(
      (s) => s.parentID === randomCategory.id,
    );
    const randomSubCategory =
      filteredSubCategories.length > 0
        ? filteredSubCategories[
            Math.floor(Math.random() * filteredSubCategories.length)
          ]
        : null;

    // üîπ S√©lectionner un utilisateur al√©atoire
    const randomUser = users[Math.floor(Math.random() * users.length)];
    if (!randomUser) continue; // Skip if no valid user is found
    const randomTitle =
      titles[Math.floor(Math.random() * titles.length)] || "Annonce sans titre";
    const randomDescription =
      descriptions[Math.floor(Math.random() * descriptions.length)] ||
      "Pas de description";
    const randomPrice = Math.floor(Math.random() * 50000) + 500; // Prix entre 500 et 50000

    await prisma.annonce.create({
      data: {
        typeAnnonceId: randomType.id,
        categorieId: randomCategory.id,
        subcategorieId: randomSubCategory ? randomSubCategory.id : "",
        lieuId: randomCategory.id, // Utilisation de la cat√©gorie comme lieu pour l'exemple
        userId: randomUser.id,
        title: randomTitle,
        description: randomDescription,
        price: randomPrice,
        contact: "+2224" + Math.floor(Math.random() * 1000000),
        haveImage: Math.random() > 0.5,
        firstImagePath: "/images/sample" + i + ".jpg",
        status: "active",
        createdAt: new Date(),
        updatedAt: new Date(),

        // ‚úÖ Ajouter les objets complets en JSON
        // typeAnnonce: randomType,
        // categorie: randomCategory,
        // subcategorie: randomSubCategory,
      },
    });
  }

  console.log(`‚úÖ 50 annonces ins√©r√©es.`);
  console.log("üéâ Seeding termin√© avec succ√®s !");
}

main()
  .catch((e) => {
    console.error("‚ùå Erreur lors du seeding :", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
