// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  //provider = "postgresql"
  url          = env("DATABASE_URL")
  // (optionnel) Vous pouvez préciser des options spécifiques à MongoDB, comme relationMode = "prisma"
  relationMode = "prisma"
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  //id String @id @default(uuid())
  email              String    @unique
  password           String
  // contact            String?
  roleId             String?
  roleName           String?
  createdAt          DateTime  @default(now())
  lastLogin          DateTime?
  isActive           Boolean   @default(false)
  emailVerified      Boolean   @default(false)
  verifyToken        String
  verifyTokenExpires DateTime?
  //profileImage String?
  //sessions  UserSession[]
  //annonces  Annonce[]
}

model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  //id         String   @id @default(cuid())
  //user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String //@unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  //@@index([token])
  //@@index([expiresAt])
}

model Contact {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  //userId      String @db.ObjectId 
  userId             String
  contact            String?
  createdAt          DateTime  @default(now())
  isActive           Boolean   @default(false)
  isVerified         Boolean   @default(false)
  verifyCode         String
  verifyTokenExpires DateTime?
}

model UserSession {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  //id String @id @default(uuid())
  //userId      String @db.ObjectId 
  userId       String
  token        String
  isExpired    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  lastAccessed DateTime?

  //user        User      @relation(fields: [userId], references: [id])
}

model OptionsModel {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  //id String @id @default(uuid())
  name      String
  nameAr    String
  priority  Int
  depth     Int
  tag       String
  createdAt DateTime @default(now())
  // parentID   String? @db.ObjectId
  parentID  String? // @db.ObjectId
}

model Image {
  //id String @id @default(uuid())
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  imagePath String
  createdAt DateTime? @default(now())
  altText   String?

  annonceImages AnnonceImage[]
}

model Annonce {
  //id String @id @default(uuid())
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  typeAnnonceId          String //@db.ObjectId 
  categorieId            String //@db.ObjectId 
  lieuId                 String //@db.ObjectId 
  userId                 String //@db.ObjectId 
  subcategorieId         String //@db.ObjectId 
  title                  String
  description            String
  price                  Float?
  contact                String
  haveImage              Boolean  @default(false)
  firstImagePath         String?
  status                 String
  isPublished Boolean  @default(false)
  updatedAt              DateTime @default(now()) @updatedAt
  createdAt              DateTime @default(now())

  //user              User        @relation(fields: [userId], references: [id])
  annonceImages AnnonceImage[]
}

model AnnoncePublicationChechList {
  id                           String  @id @default(auto()) @map("_id") @db.ObjectId
  annonceId                    String 
  isContactVerified            Boolean @default(false)
  isAnnonceVerifiedByIA        Boolean @default(false)
  isAnnonceVerifiedByAdmin     Boolean @default(false)
  isAnnonceVerifiedByAssistant Boolean @default(false)
  isAllowedToBePublished       Boolean @default(false)
}

model AnnonceImage {
  //id String @id @default(uuid())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  annonceId String   @db.ObjectId
  imageId   String   @db.ObjectId
  createdAt DateTime @default(now())

  annonce Annonce @relation(fields: [annonceId], references: [id])
  //image     Image   @relation(fields: [imageId], references: [id])
  image   Image   @relation(fields: [imageId], references: [id])

  @@unique([annonceId, imageId])
  @@index([imageId])
}
